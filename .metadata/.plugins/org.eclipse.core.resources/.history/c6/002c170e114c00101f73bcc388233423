package in.tejas.service;

import java.io.FileOutputStream;
import java.lang.reflect.Parameter;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.stereotype.Service;

import com.lowagie.text.Document;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;

import in.tejas.entity.CitizenPlan;
import in.tejas.repo.CitizenPlanRepo;
import in.tejas.request.SearchRequest;
import jakarta.servlet.ServletOutputStream;
import jakarta.servlet.http.HttpServletResponse;

@Service
public class CitizenServiceImpl implements CitizenService {

	@Autowired
	private CitizenPlanRepo planRepo;
	
	@Override
	public List<String> getPlanName() {
		// TODO Auto-generated method stub
		 List<String> planNames = planRepo.getPlanNames();
		 return planNames;
		
	}

	@Override
	public List<String> getPlanStatuses() {
		// TODO Auto-generated method stub
		return planRepo.getPlanStatus();
	}

	@Override
	public List<CitizenPlan> search(SearchRequest request) {
		// TODO Auto-generated method stub
		CitizenPlan entity = new CitizenPlan();
//		BeanUtils.copyProperties(request, entity); dont copy directly like this data will came empty instead of null
		
		if(null != request.getPlanName() && !"".equals(request.getPlanName())) {
			entity.setPlanName(request.getPlanName());
		}
		
		if(null != request.getPlanStatus() && !"".equals(request.getPlanStatus())) {
			entity.setPlanStatus(request.getPlanStatus());
		}
		
		if(null != request.getGender() && !"".equals(request.getGender())) {
			entity.setGender(request.getGender());
		}
		
		if(null != request.getStartDate() && !"".equals(request.getStartDate())) {
			String startDate = request.getStartDate();
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
			LocalDate localDate =  LocalDate.parse(startDate,formatter);
			entity.setPlanStartDate(localDate);
			
		}
		
		return planRepo.findAll(Example.of(entity));
	}

	@Override
	public boolean exportExcel(HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		
		Workbook workbook = new HSSFWorkbook();
		Sheet sheet = workbook.createSheet("plans-data");
		Row row = sheet.createRow(0);
		row.createCell(0).setCellValue("ID");
		row.createCell(1).setCellValue("Citizen Name");
		row.createCell(2).setCellValue("Plan Name");
		row.createCell(3).setCellValue("Plan Status");
		row.createCell(4).setCellValue("Plan Start Date");
		row.createCell(5).setCellValue("Plan End Date");
		row.createCell(6).setCellValue("Benefit Amt");
		
		List<CitizenPlan> records = planRepo.findAll();
		
		int dataRowIndex = 1;
		
		for(CitizenPlan plan : records) {
			Row dataRow = sheet.createRow( dataRowIndex );
			dataRow.createCell(0).setCellValue(plan.getCitizenid());
			dataRow.createCell(1).setCellValue(plan.getCitizename());
			dataRow.createCell(2).setCellValue(plan.getPlanName());
			dataRow.createCell(3).setCellValue(plan.getPlanStatus());
//			dataRow.createCell(4).setCellValue(plan.getPlanStartDate()+"");//date is not converting properly in excel so concatenate with string 
//			dataRow.createCell(5).setCellValue(plan.getPlanEndDate()+"");
			
			if(null != plan.getPlanStartDate()) {
				dataRow.createCell(4).setCellValue(plan.getPlanStartDate()+"");//date is not converting properly in excel so concatenate with string 
				
			}
			else {
				dataRow.createCell(4).setCellValue("N/A");
			}
			if(null != plan.getPlanEndDate()) {
				dataRow.createCell(5).setCellValue(plan.getPlanEndDate()+"");
			}
			else {
				dataRow.createCell(5).setCellValue("N/A");
			}
			if(null != plan.getBenefitAmt()) {
				dataRow.createCell(6).setCellValue(plan.getBenefitAmt());
			}
			else {
				dataRow.createCell(6).setCellValue("N/A");
			}
			dataRowIndex++;
		}
	
		ServletOutputStream outputStream = response.getOutputStream();
		workbook.write(outputStream);
		workbook.close();
		return true;
	}

	@Override
	public boolean exportdf(HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		Document document = new Document(PageSize.A4);
		PdfWriter.getInstance(document,response.getOutputStream());
		document.open();
		Paragraph p = new Paragraph("citizen plans info");
		document.add(p);
		
		PdfPTable table = new PdfPTable(6);
		table.addCell("Id");
		table.addCell("Citizen Name");
		table.addCell("Plan Name");
		table.addCell("Plan Status");
		table.addCell("Start Date");
		table.addCell("End Date");
		
		
		List<CitizenPlan> plans = planRepo.findAll();
		
		for(CitizenPlan plan : plans) {
			table.addCell(String.valueOf(plan.getCitizenid()));
			table.addCell(plan.getCitizename());
			table.addCell(plan.getPlanName());
			table.addCell(plan.getPlanStatus());
			table.addCell(plan.getPlanStartDate());
			table.addCell(plan.getPlanEndDate());
	}
		
		document.add(table);
		document.close();
		return false;
	}

}
